{"version":3,"sources":["components/TeamsTable.js","App.js","index.js"],"names":["TeamsTable","teams","setTeams","useState","loading","setLoading","error","setError","SKILLS_JSON_URL","TEAMS_JSON_URL","QUALIFIED_JSON_URL","useEffect","async","skillsResponse","teamsResponse","qualifiedResponse","Promise","all","fetch","ok","Error","skillsData","json","teamsData","qualifiedData","qualifiedTeams","Set","Object","values","team_name","mergedData","map","skill","teamInfo","find","team","team_id","team_number","isQualified","has","rank","programming_score","driver_score","total_score","highest_auto","highlight","sort","a","b","forEach","index","totalHighlighted","filter","length","i","err","message","fetchTeams","React","createElement","className","key","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.96fedacd.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../styles.css\"; // Ensure this file is correctly imported\n\nconst TeamsTable = () => {\n    const [teams, setTeams] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Paths to JSON files in public folder\n    const SKILLS_JSON_URL = \"/skills_list.json\";\n    const TEAMS_JSON_URL = \"/team_list.json\";\n    const QUALIFIED_JSON_URL = \"/qualified.json\"; // New file for qualified teams\n\n    useEffect(() => {\n        async function fetchTeams() {\n            try {\n                // Fetch all JSON data concurrently\n                const [skillsResponse, teamsResponse, qualifiedResponse] = await Promise.all([\n                    fetch(SKILLS_JSON_URL),\n                    fetch(TEAMS_JSON_URL),\n                    fetch(QUALIFIED_JSON_URL)\n                ]);\n\n                if (!skillsResponse.ok || !teamsResponse.ok || !qualifiedResponse.ok) {\n                    throw new Error(\"Failed to fetch data.\");\n                }\n\n                const skillsData = await skillsResponse.json();\n                const teamsData = await teamsResponse.json();\n                const qualifiedData = await qualifiedResponse.json();\n\n                // Extract qualified team names into a Set for fast lookup\n                const qualifiedTeams = new Set(Object.values(qualifiedData.team_name));\n\n                // Merge team info with skills data\n                const mergedData = skillsData.map(skill => {\n                    const teamInfo = teamsData.find(team => team.team_id === skill.team_number) || {};\n                    const isQualified = qualifiedTeams.has(skill.team_name); // Check qualification\n\n                    return {\n                        rank: 0, // Will be set after sorting\n                        team_number: teamInfo.team_number,\n                        team_name: teamInfo.team_name || \"Unknown\",\n                        programming_score: skill.programming_score,\n                        driver_score: skill.driver_score,\n                        total_score: skill.total_score,\n                        highest_auto: skill.highest_auto,\n                        highlight: isQualified ? \"green\" : \"\" // Apply green highlight if qualified\n                    };\n                });\n\n                // Sort teams by total score (highest to lowest)\n                mergedData.sort((a, b) => {\n                    if (b.total_score === a.total_score) {\n                        if (b.highest_auto === a.highest_auto) {\n                            return b.driver_score - a.driver_score;\n                        }\n                        return b.highest_auto - a.highest_auto;\n                    }\n                    return b.total_score - a.total_score;\n                });\n\n                // Assign ranks after sorting\n                mergedData.forEach((team, index) => {\n                    team.rank = index + 1;\n                });\n\n                let totalHighlighted = mergedData.filter(team => team.highlight === \"green\").length;\n                \n                // Highlight additional top teams in yellow until we reach 56 total\n                for (let i = 0; i < mergedData.length && totalHighlighted < 56; i++) {\n                    if (mergedData[i].highlight === \"\") {\n                        mergedData[i].highlight = \"yellow\";\n                        totalHighlighted++;\n                    }\n                }\n\n                setTeams(mergedData);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        }\n\n        fetchTeams();\n    }, []);\n\n    if (loading) return <p>Loading teams...</p>;\n    if (error) return <p>Error: {error}</p>;\n\n    return (\n        <div className=\"container\">\n            <h2 className=\"title\">Virginia VRC Teams - Skills Scores</h2>\n            <p className=\"highlight-info\">\n                <span className=\"green-highlight\">Green highlight</span>: \"Already Qualified\" and \n                <span className=\"yellow-highlight\">Yellow highlight</span>: \"Will Qualify if Season Ends Today\"\n            </p>\n            <p className=\"disclaimer\">Results are unofficial and no guarantee of accuracy; Tie-Breakers not calculated</p>\n            <div className=\"table-container\">\n                <table>\n                    <colgroup>\n                        <col />\n                        <col />\n                        <col />\n                        <col />\n                    </colgroup>\n                    <thead>\n                        <tr>\n                            <th>Rank</th>\n                            <th>Total Score</th>\n                            <th>Programming Score</th>\n                            <th>Driver Score</th>\n                            <th>Team Number</th>\n                            <th>Team Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {teams.map((team) => (\n                            <tr key={team.team_number} className={team.highlight}>\n                                <td>{team.rank}</td>\n                                <td>{team.total_score}</td>\n                                <td>{team.programming_score}</td>\n                                <td>{team.driver_score}</td>\n                                <td>{team.team_number}</td>\n                                <td>{team.team_name}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default TeamsTable;\n","import React from \"react\";\nimport TeamsTable from \"./components/TeamsTable\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TeamsTable />\n        </div>\n    );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport \"./styles.css\";\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}